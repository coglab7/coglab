{"id":"BRWJ2YmdUFoz1jUcCg5P21RYgb4CmSRDHkju2uMS7GB1447d","title":"Mouse Vs Python","displayTitle":"Dev - Python Blog","url":"https://blog.pythonlibrary.org/feed","feedLink":"https://www.blog.pythonlibrary.org/","isQuery":false,"isEmpty":false,"isHidden":false,"itemCount":1,"items":[{"title":"Parsing XML Comments with Python","url":"https://www.blog.pythonlibrary.org/2025/06/05/parsing-xml-comments-with-python/","date":1749130224,"author":"Mike","guid":304,"unread":true,"content":"<p>The Extensible Markup Language (XML) is a markup format originally for XML. Some companies use XML as a data serialization format or for configuration. Recently, I needed to learn how to uncomment some lines in an XML file to enable some settings that were defined in the XML.</p><p>Fortunately, Python’s  module provides a way to do this. Let’s find out how!</p><h2>AI Answers Might Not Work</h2><p>When I used Google to search for an answer to this question: “How to edit comments in XML with Python”, Google Gemini piped up with this answer:</p><pre data-enlighter-language=\"python\">import xml.etree.ElementTree as ET\n\nxml_file = \"PATH_TO_XML\"\n\ntree = ET.parse(xml_file)\nroot = tree.getroot()\n\nfor element in root.iter():\n    if isinstance(element.tag, str) and element.tag.startswith('{'):\n        continue\n    if element.tag == ET.Comment:\n        text = element.text.strip()\n        print(text)</pre><p>Unfortunately, this code does not work. But it is close.</p><p>If you look through StackOverflow and similar forums, you will discover that you need a custom parser. Here’s how to create one:</p><pre data-enlighter-language=\"generic\">import xml.etree.ElementTree as ET\n\nxml_file = r\"PATH_TO_XML\"\n\nparser = ET.XMLParser(target=ET.TreeBuilder(insert_comments=True))\ntree = ET.parse(xml_file, parser)\nroot = tree.getroot()\n\nfor element in root.iter():\n    if isinstance(element.tag, str) and element.tag.startswith('{'):\n        continue\n\n    if element.tag == ET.Comment:\n        text = element.text.strip()        \n        print(text)</pre><p>The key point here is to create an instance of ET.XMLParser and set&nbsp; to True. Then the code will work.</p><p>Note that this example just prints out the commented text. You would need to do something like this to grab the commented text and reinsert it as a valid XML element:</p><pre data-enlighter-language=\"python\">for element in root.iter():\n   if isinstance(element.tag, str) and element.tag.startswith('{'):\n      continue\n   if element.tag == ET.Comment:\n      text = element.text.strip()\n      if \"COMMENTED CODE SUBSTRING\" in text:\n         new_element = ET.fromstring(f\"&lt;{text}&gt;\")\n         # Insert the uncommented text as a new XML element\n         root.insert(list(root).index(element), new_element)\n         # Remove the element that was commented out originally\n         root.remove(element)\n\n# Make indentation work for the output\nET.indent(tree, space=\"\\t\", level=0)\n\nwith open(XML_PATH, \"wb\") as f:\n   tree.write(f)</pre><p>Here, you loop over each element or tag in the XML. You check if the element is a comment type. If it is, you check for the substring you are looking for in the comment’s text. When you find the substring, you extract the entire string from the comment, create a new element, insert it as a regular element, and remove the comment.</p><p>XML is a handy format, and Python includes several different methods of working with XML in its  module. Several different third-party XML modules, such as lxml, are also great alternatives. If you work with XML, hopefully you will find this article helpful.</p><p>Have fun and happy coding!</p>","contentLength":2928,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null}],"tags":["dev","python"]}