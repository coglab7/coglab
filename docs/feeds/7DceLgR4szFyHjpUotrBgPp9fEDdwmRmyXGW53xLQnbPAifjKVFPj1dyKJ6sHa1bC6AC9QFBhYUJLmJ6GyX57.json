{"id":"7DceLgR4szFyHjpUotrBgPp9fEDdwmRmyXGW53xLQnbPAifjKVFPj1dyKJ6sHa1bC6AC9QFBhYUJLmJ6GyX57","title":"top scoring links : linux","displayTitle":"Reddit - Linux","url":"https://www.reddit.com/r/linux/top/.rss?sort=top&t=day&limit=6","feedLink":"https://www.reddit.com/r/linux/top/?sort=top&t=day&limit=6","isQuery":false,"isEmpty":false,"isHidden":false,"itemCount":6,"items":[{"title":"nano color syntax file that displays it's own named colors, as actual colors","url":"https://git.envs.net/carbonwriter/nanocolors","date":1749428483,"author":"/u/nad6234","guid":355,"unread":true,"content":"<!DOCTYPE html>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/linux/comments/1l6r5c3/nano_color_syntax_file_that_displays_its_own/"},{"title":"Experimenting with Linux cgroups to tweak memory limits for processes","url":"https://www.reddit.com/r/linux/comments/1l6q23q/experimenting_with_linux_cgroups_to_tweak_memory/","date":1749425303,"author":"/u/pirate_husky","guid":354,"unread":true,"content":"<p>Hey, I recently decided to get back to studying systems regularly and so I am conducting small experiments for learning purposes.I recently explored how cgroups can restrict process memory usage. Here's what I did:</p><ol><li>Created a cgroup with a 1MB memory limit.</li><li>Ran a simple program that tried to allocate ~5MB.</li><li>Observed the process getting killed due to exceeding the memory limit (OOM kill).</li><li>Checked cgroup memory events to confirm the behavior.</li></ol><p>You can find the detailed steps <a href=\"https://github.com/adiaholic/Understand-OS/tree/main/processes_and_cgroups\">here</a>.</p><p>Are there better ways to experiment with cgroups or other interesting use cases you'd recommend I should try? I wish to hear your thoughts and suggestions.</p>","contentLength":630,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Is linux a red flag for employers?","url":"https://www.reddit.com/r/linux/comments/1l6e4rn/is_linux_a_red_flag_for_employers/","date":1749394669,"author":"/u/Bassman117","guid":359,"unread":true,"content":"<p>Hello y’all, I got a question that’s been stuck in my head after an interview I had. I mentioned the fact that I use Linux on my main machine during an interview for a tier 2 help desk position. Their environment was full windows devices and mentioned that I run a windows vm through qemu with a gpu passed through. Through the rest of the interview they kept questioning how comfortable I am with windows.</p><p>My background is 5 years of edu based environments and 1 year while working at an msp as tier 1 help desk. All jobs were fully windows based with some Mac’s. </p><p>Has anyone else experience anything similar? </p>","contentLength":615,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Why aren't people talking about AppArmor and SELinux in the age of AI?","url":"https://www.reddit.com/r/linux/comments/1l6ddqu/why_arent_people_talking_about_apparmor_and/","date":1749392661,"author":"/u/Bartmr","guid":358,"unread":true,"content":"<p>Currently, AI bots and software, like Cursor and MCPs like Github, can read all of your home directory (including cookies and access tokens in your browser) to give you code suggestions or act on integrations like email and documents. Not only that, these AI tools rely heavily on dozens of new libraries that haven't been properly vetted and whose contributors are picked on the spot. Cursor does not even hide the fact that its tools may start wondering around. </p><p>These MCP servers are also more prone to remote code execution, since they are impossible to have 100% hard limits. </p><p>Why aren't people talking more about how AppArmor or SELinux can isolate these AI applications, like mobile phones do today? </p>","contentLength":705,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Jordan Petridis: An update on the X11 GNOME Session Removal","url":"https://blogs.gnome.org/alatiera/2025/06/08/the-x11-session-removal/","date":1749391831,"author":"/u/marcthe12","guid":357,"unread":true,"content":"<p>A year and a half ago, shortly after the GNOME 45 release, I opened a pair of <a href=\"https://gitlab.gnome.org/GNOME/gnome-session/-/merge_requests/99\">Pull Requests</a> to deprecate and remove the X11 Session.</p><p>A lot has happened since. The GNOME 48 release addressed all the remaining blocking issues, mainly accessibility regressions, but it was too late in the development cycle to drop the session as well.</p><p>We went ahead and disabled the X11 session by default and from now on it needs to be explicitly enabled when building the affected modules. (gnome-session, GDM, mutter/gnome-shell). This does not affect XWayland, it’s only about the X11/Xorg session and related functionality. GDM’s ability to launch other X11 sessions will be also <a href=\"https://gitlab.gnome.org/GNOME/gdm/-/issues/989#note_2464911\">preserved</a>.</p><p>Usually we release a single Alpha snapshot, but this time we have released earlier snapshots (49.alpha.0), 3 weeks ahead of the <a href=\"https://release.gnome.org/calendar/\">normal schedule</a>, to gather as much feedback and testing as possible. (There will be another snapshot along the complete GNOME 49 Alpha release).</p><p>If you are a distributor, please try to not change the default or at least let us (or me directly) know why you’d need to still ship the X11 session.</p><p>As I mentioned in the <a href=\"https://gitlab.gnome.org/GNOME/Initiatives/-/issues/60\">tracking issue</a> ticket, there 3 possible scenarios.</p><p>The most likely scenario is that all the X11 session code stays disabled by default for 49 with a planned removal for GNOME 50.</p><p>The ideal scenario is that everything is perfect, there are no more issues and bugs, we can go ahead and drop all the code before GNOME 49.beta.</p><p>And the very unlikely scenario is that we discover some deal-breaking issue, revert the changes and postpone the whole thing.</p><p>Having gathered feedback from our distribution partners, it now depends entirely on how well the early testing will go and what bugs will be uncovered.</p><p>You can test <a href=\"https://os.gnome.org/\">GNOME OS Nightly</a> with all the changes today. We found a couple minor issues but everything is fixed in the alpha.0 snapshot. Given how smooth things are going so far I believe there is a high likely-hood there won’t be any further issues and we might be able to proceed with the Ideal scenario.</p><p>TLDR: The X11 session for GNOME 49 will be disabled by default and it’s scheduled for removal, either during this development cycle or more likely during the next one (GNOME 50). There are release snapshots of 49.alpha.0 for some modules already available. Go and try them out!</p><p>Happy Pride month and Free Palestine ✊</p>","contentLength":2348,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/linux/comments/1l6d2dl/jordan_petridis_an_update_on_the_x11_gnome/"},{"title":"More groff Quick Reference Guides (-man and -mom)","url":"https://www.reddit.com/r/linux/comments/1l67am6/more_groff_quick_reference_guides_man_and_mom/","date":1749371367,"author":"/u/StrangeAstronomer","guid":356,"unread":true,"content":"<p>So I thought I'd create a QRG to  to add to my ,  and  ones. It was easy - how small is the set of  macros! A tribute to the concise way the original developers aced manual writing both for the terminal and on the printed (postscript) page. The downside is that  has not the horsepower to write this document in it's own macro set so I had to use .</p><p>Then, having managed quite nicely for much of my own documentation with  all these years (since the 80's), I recently heard about  (I'm 'Tom' at <a href=\"https://linuxgazette.net/107/schaffter.html\">https://linuxgazette.net/107/schaffter.html</a> - just 21 years late!) so I thought I'd take a look at it. </p><p>The best way to learn something like this is to write in it - so now I have a shiny new, if slightly banged up QRG for . Sheesh -  is enormous, what an epic piece of work by an obvious genius - but what labyrinthine, baroque and berserk documentation. It's not easy to plumb the depths of it and I must confess I haven't crushed it like the other QRG's. I've run out of patience for now but it's more or less fit for purpose modulo some formatting quirks and the inevitable inaccuracies and errors (all mine). As ever, the real documentation is ground truth, not my QRGs but nonetheless they may be useful to others as well as myself. There is, of course, an <a href=\"https://www.schaffter.ca/mom/momdoc/toc.html#quick\">online QRG</a> as part of  author's documentation but it is itself of book length. MIne is just 8 pages.</p><p>All these tributes to the groff way of doing things are on <a href=\"https://gitlab.com/wef/groff-quick-ref\">gitlab</a></p>","contentLength":1420,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null}],"tags":["dev","reddit"]}